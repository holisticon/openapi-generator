{{#debug}}apiMethodBodyParameters.mustache{{/debug}}
{{#bodyParam}}val {{#bodyParam}}{{paramName}}{{/bodyParam}} = request.body {{/bodyParam}}{{!

}}{{#queryParams}}
// query parameter {{! ----------------------  queryParams ----------------------
 for keywords: baseName='data', paramName='`data`' }}
val {{paramName}} = request.queryParameters["{{baseName}}"]{{>parseQueryParameter}}
{{/queryParams}}

{{#headerParams}}
// header parameter {{! ----------------------  headerParams ----------------------}}
val {{paramName}} = request.headers["{{baseName}}"] {{#trim1L}}
{{#isEnum}}?.let{
  {{#debug}}isEnum{{/debug}}
  {{#isArray}}TODO()/* array of enums in header parameter */{{/isArray}}
  {{^isArray}}{{datatypeWithEnum}}.valueOf(it) {{/isArray}}
} {{#defaultValue}} ?: {{datatypeWithEnum}}.valueOf("{{defaultValue}}"){{/defaultValue}}
{{/isEnum}}
{{^isEnum}}{{#debug}}no enum{{/debug}}{{#defaultValue}} ?: {{defaultValue}}{{/defaultValue}}{{^defaultValue}}{{/defaultValue}}{{/isEnum}}
{{/trim1L}}{{/headerParams}}

// required parameter validation
val notSetRequiredParams = mutableSetOf<String>()
{{#allParams}}{{^defaultValue}}{{#required}}
{{#bodyFormParam}}// TODO: bodyFormParam [{{paramName}}/{{baseName}}] must be parsed from the body{{#debug}}filtered {{paramName}}/{{baseName}} because it's a form body parameter{{/debug}}{{/bodyFormParam}}
{{^bodyFormParam}}{{paramName}} ?: run{ notSetRequiredParams.add("{{baseName}}") } {{#debug}} {{paramName}}/{{baseName}} is a required parameter{{/debug}}{{/bodyFormParam}}
{{/required}}{{/defaultValue}}{{/allParams}}

if(notSetRequiredParams.isNotEmpty()) {
  return request
    .createResponseBuilder(HttpStatus.BAD_REQUEST)
    .body("Required parameters missing: ${notSetRequiredParams.joinToString { ", " }}")
    .build()
}

