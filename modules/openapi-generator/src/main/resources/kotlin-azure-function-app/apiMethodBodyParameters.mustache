{{#debug}}apiMethodBodyParameters.mustache{{/debug}}

// body parameter {{! ----------------------  bodyParam ---------------------- }}
{{#bodyParam}}val {{#bodyParam}}{{paramName}}{{/bodyParam}} = request.body {{/bodyParam}}

// query parameter {{! ----------------------  queryParams ---------------------- for keywords: baseName='data', paramName='`data`' }}
{{#queryParams}}

val {{paramName}} = request.queryParameters["{{baseName}}"]{{>parseQueryParameter}}
{{/queryParams}}

// header parameter{{! ----------------------  headerParams ----------------------}}
{{#headerParams}}
val {{paramName}} = request.headers["{{baseName}}"]{{>parseQueryParameter}}
{{/headerParams}}

// required parameter validation
val notSetRequiredParams = mutableSetOf<String>()
{{#allParams}}{{^defaultValue}}{{#required}}
{{#bodyFormParam}}// TODO: bodyFormParam [{{paramName}}/{{baseName}}] must be parsed from the body{{#debug}}filtered {{paramName}}/{{baseName}} because it's a form body parameter{{/debug}}{{/bodyFormParam}}
{{^bodyFormParam}}{{paramName}} ?: run{ notSetRequiredParams.add("{{baseName}}") } {{#debug}} {{paramName}}/{{baseName}} is a required parameter{{/debug}}{{/bodyFormParam}}
{{/required}}{{/defaultValue}}{{/allParams}}

if(notSetRequiredParams.isNotEmpty()) {
  return request
    .createResponseBuilder(HttpStatus.BAD_REQUEST)
    .body("Required parameters missing: ${notSetRequiredParams.joinToString { ", " }}")
    .build()
}

