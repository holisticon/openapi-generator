{{#debug}}apiMethodBodyParameters.mustache{{/debug}}

// body parameter {{! ----------------------  bodyParam ---------------------- }}
{{#bodyParam}}val {{#bodyParam}}{{paramName}}{{/bodyParam}} = rawRequest.body {{/bodyParam}}

// query parameter {{! ----------------------  queryParams ---------------------- for keywords: baseName='data', paramName='`data`' }}
{{#queryParams}}
val {{paramName}}: {{datatypeWithEnum}}{{^datatypeWithEnum}}{{dataType}}{{/datatypeWithEnum}}{{^defaultValue}}?{{/defaultValue}} = rawRequest.queryParameters["{{baseName}}"]{{#rmNl}}{{>parseQueryParameter}}{{/rmNl}}
{{/queryParams}}

// path parameter {{! ----------------------  pathParams ---------------------- for non basic type handling }}
{{#pathParams}}{{#isEnum}}
  val {{#addEnumSuffix}}{{paramName}}{{/addEnumSuffix}} = {{paramName}}{{#break}}{{/break}}?.let { {{#trim1L}}
    {{#isString}}
      {{datatypeWithEnum}}.valueOf(it)
    {{/isString}}
    {{^isString}}
      p -> {{datatypeWithEnum}}.values().find { it.value == p }
    {{/isString}}
    } {{/trim1L}}
  {{#defaultValue}}
  ?: {{#trim1L}}
   {{enumName}}.{{enumDefaultValue}}
  {{/trim1L}}{{/defaultValue}}
{{/isEnum}}{{/pathParams}}

// header parameter{{! ----------------------  headerParams ----------------------}}
{{#headerParams}}
val {{paramName}} = rawRequest.headers["{{baseName}}"]{{#rmNl}}{{>parseQueryParameter}}{{/rmNl}}
{{/headerParams}}

// cookie parameter{{! ----------------------  cookieParams ----------------------}}
{{#cookieParams}}
  val {{paramName}} = TODO() /* implement how to handle cookie parameters */
{{/cookieParams}}


// required parameter validation {{! ----------------------  parameter validation ----------------------}}
val notSetRequiredParams = mutableSetOf<String>()
{{#allParams}}{{^defaultValue}}{{#required}}
{{#bodyFormParam}}// TODO: bodyFormParam [{{paramName}}/{{baseName}}] must be parsed from the body{{#debug}}filtered {{paramName}}/{{baseName}} because it's a form body parameter{{/debug}}{{/bodyFormParam}}
{{^bodyFormParam}}{{paramName}} ?: run{ notSetRequiredParams.add("{{baseName}}") } {{#debug}} {{paramName}}/{{baseName}} is a required parameter{{/debug}}{{/bodyFormParam}}
{{/required}}{{/defaultValue}}{{/allParams}}

if(notSetRequiredParams.isNotEmpty()) {
  return rawRequest
    .createResponseBuilder(HttpStatus.BAD_REQUEST)
    .body("Required parameters missing: ${notSetRequiredParams.joinToString { ", " }}")
    .build()
}

