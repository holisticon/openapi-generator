{{#bodyParam}}val {{#bodyParam}}{{paramName}}{{/bodyParam}} = request.body {{/bodyParam}}{{!

}}{{#queryParams}}
// query parameters {{! ----------------------  queryParams ----------------------}}
val {{paramName}} = request.queryParameters["{{paramName}}"]{{!
}}{{^isArray}}{{#isEnum}}{{#debug}} <<< no array and enum >>>
{{/debug}}?.let{ {{enumName}}_{{operationId}}.valueOf(it) }{{#defaultValue}} ?: {{enumName}}_{{operationId}}.valueOf("{{defaultValue}}"){{/defaultValue}}  {{/isEnum}}{{/isArray}}{{!
}}{{#isArray}}{{#debug}} <<< array >>>{{/debug}}{{!
}}?.split(",")?.toTypedArray() ?: emptyArray(){{/isArray}}{{!
}}{{^isArray}}{{^isEnum}}{{#debug}} <<< no array no enum >>> {{/debug}}{{#dump}}{{/dump}}{{#defaultValue}} ?: {{defaultValue}}{{/defaultValue}}{{^defaultValue}}{{/defaultValue}}{{/isEnum}}{{/isArray}}{{!
}}{{>parseQueryParameter}}
{{/queryParams}}

{{#headerParams}}
// header parameters {{! ----------------------  headerParams ----------------------}}
val {{paramName}} = request.headers["{{paramName}}"]{{#isEnum}}?.let{ {{enumName}}_{{operationId}}.valueOf(it) }{{#defaultValue}} ?: {{enumName}}_{{operationId}}.valueOf("{{defaultValue}}"){{/defaultValue}}{{/isEnum}}{{^isEnum}}{{#defaultValue}} ?: {{defaultValue}}{{/defaultValue}}{{^defaultValue}}{{/defaultValue}}{{/isEnum}}
{{/headerParams}}

// required parameter validation
val notSetRequiredParams = mutableSetOf<String>()
{{#allParams}}
{{^defaultValue}}{{#required}}{{paramName}} ?: run{ notSetRequiredParams.add("{{paramName}}") }{{/required}}{{/defaultValue}}
{{/allParams}}

if(notSetRequiredParams.isNotEmpty()) {
  return request
    .createResponseBuilder(HttpStatus.BAD_REQUEST)
    .body("Required parameters missing: ${notSetRequiredParams.joinToString { ", " }}")
    .build()
}

