{{! in queryParams / CodegenParameter }}
{{^isString}}{{#trim1L}}
  ?.let {
  {{#debug}}parse non string query parameter{{/debug}}
  {{#isDate}}
    {{dataType}}.parse(it)
  {{/isDate}}
  {{#isDateTime}}
    {{dataType}}.parse(it)
  {{/isDateTime}}
  {{#isNumeric}}
    {{dataType}}.parse(it)
  {{/isNumeric}}
  {{#isInteger}}
      it.toInt()
  {{/isInteger}}
  {{#isBoolean}}
      it.toBoolean()
  {{/isBoolean}}
  {{#isLong}}
      it.toLong()
  {{/isLong}}
  {{#isDouble}}
      it.toDouble()
  {{/isDouble}}
  {{#isFloat}}
      it.toFloat()
  {{/isFloat}}
  {{#dump}}{{/dump}}
  {{#hiddenEnum}}
    {{#debug}}a hidden enum{{/debug}}
    {{>smartDataType}}.valueOf(it){{#debug}}hiddenEnum{{/debug}}
  {{/hiddenEnum}}
  {{#schema}}{{#isModel}}
      TODO() /* no object support in query parameters */
  {{/isModel}}{{/schema}}
  {{#isArray}}TODO()/* array of strings */{{/isArray}}
  }
{{/trim1L}}{{/isString}}
{{#isEnum}}{{! nested enums are strings as base type }}
    {{#debug}}isEnum{{/debug}}
    ?.let<_ ,{{datatypeWithEnum}}>{
    {{#isArray}}TODO()/* array of enums */{{/isArray}}
    {{^isArray}}{{datatypeWithEnum}}.valueOf(it){{/isArray}}
    }
{{/isEnum}}
{{#defaultValue}}
    {{#trim1L}}
    ?:
    {{#isEnum}}
        {{>smartDataType}}.{{#debug}}defaultValue.isEnum{{/debug}}
    {{/isEnum}}
    {{#hiddenEnum}}
        {{>smartDataType}}.{{#debug}}hiddenEnum{{/debug}}
    {{/hiddenEnum}}
    {{#enum}}
        {{>smartDataType}}.{{#debug}}enum{{/debug}}
    {{/enum}}
    {{defaultValue}}{{#debug}}set default value{{/debug}}
    {{/trim1L}}
{{/defaultValue}}
