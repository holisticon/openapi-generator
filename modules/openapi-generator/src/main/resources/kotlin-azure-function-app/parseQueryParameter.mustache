{{! in CodegenParameter }}
{{#isUuid}}
  ?.let{
    {{dataType}}.fromString(it)
  }
{{/isUuid}}

{{^isUuid}}{{^isString}}{{#trim1L}}
  ?.let {
  {{#debug}}parse non string query parameter{{/debug}}
  {{#isDate}}
    {{dataType}}.parse(it)
  {{/isDate}}
  {{#isDateTime}}
    {{dataType}}.parse(it)
  {{/isDateTime}}
  {{#isNumeric}}
    {{dataType}}.parse(it)
  {{/isNumeric}}
  {{#isNumber}}
    {{dataType}}(it)
  {{/isNumber}}
  {{#isInteger}}
      it.toInt()
  {{/isInteger}}
  {{#isBoolean}}
      it.toBoolean()
  {{/isBoolean}}
  {{#isLong}}
      it.toLong()
  {{/isLong}}
  {{#isDouble}}
      it.toDouble()
  {{/isDouble}}
  {{#isFloat}}
      it.toFloat()
  {{/isFloat}}
  {{#hiddenEnum}}
    {{#debug}}a hidden enum{{/debug}}
    {{>smartDataType}}.valueOf(it){{#debug}}hiddenEnum{{/debug}}
  {{/hiddenEnum}}
  {{#schema}}{{#isModel}}
      TODO() /* no object support in query parameters */
  {{/isModel}}{{/schema}}
  {{#isArray}}TODO()/* array of strings */{{/isArray}}
  }
{{/trim1L}}{{/isString}}{{/isUuid}}

{{#isEnum}}{{! nested enums are strings as base type }}
    {{#debug}}non string enum{{/debug}}
    ?.let<_ ,{{datatypeWithEnum}}?>{ {{#trim1L}}
    {{#isArray}}TODO()/* array of enums */{{/isArray}}
    {{^isArray}}{{datatypeWithEnum}}.values().find { v -> v.value == it }{{/isArray}}
    {{/trim1L}} }
{{/isEnum}}

{{#defaultValue}}
    {{#trim1L}}
    ?:
    {{#isEnum}}
      {{#getSchema}}{{defaultValue}}{{/getSchema}}{{#debug}}defaultValue.isEnum{{/debug}}
    {{/isEnum}}
    {{#hiddenEnum}}
      {{#getSchema}}{{defaultValue}}{{/getSchema}}{{#debug}}hiddenEnum{{/debug}}
    {{/hiddenEnum}}
    {{#enum}}
      {{#getSchema}}{{defaultValue}}{{/getSchema}}{{#debug}}enum{{/debug}}
    {{/enum}}
      {{^enum}}{{^isEnum}}{{^hiddenEnum}}
        {{defaultValue}}{{#debug}}set default value{{/debug}}
      {{/hiddenEnum}}{{/isEnum}}{{/enum}}
    {{/trim1L}}
{{/defaultValue}}
