package {{package}}
{{#debug}}apiInterface.mustache{{/debug}}

{{#debug}}== iterated imports =={{/debug}}
{{#imports}}import {{import}}
{{/imports}}

{{#debug}}== manual imports =={{/debug}}
import kotlin.collections.List
import kotlin.collections.Map


import com.microsoft.azure.*
import com.microsoft.azure.functions.*
import com.microsoft.azure.functions.annotation.*


{{#operations}}
{{#genInterfaceImpl}}
class {{#removeApiSuffix}}{{classname}}{{/removeApiSuffix}}Api: {{classname}}Interface {}
{{/genInterfaceImpl}}

interface {{classname}}Interface {
  companion object {
  {{#operation}}{{#allParams}}{{#removeEmptyLines}}
    {{#isArray}}
      {{#isEnum}}{{#items}}
        {{>enum_nested}}
      {{/items}}
      {{/isEnum}}
      {{^isEnum}}{{#debug}}TODO: Non Enum ignored array parameter named: {{baseName}} {{/debug}}{{/isEnum}}
    {{/isArray}}
    {{^isArray}}
      {{#isEnum}}{{>enum_nested}}{{/isEnum}}
    {{^isEnum}}{{#debug}}filtered non-enum parameter named: {{baseName}} {{/debug}}{{/isEnum}}
    {{/isArray}}
  {{/removeEmptyLines}}{{/allParams}}{{/operation}}
  }

{{#operation}}
  fun {{operationId}}(
    {{#removeEmptyLines}}{{#lambda.indented}}{{>interfaceMethodParams}}{{/lambda.indented}}{{/removeEmptyLines}}
  ): {{#upperFirstLetter}}{{operationId}}{{/upperFirstLetter}}Result {
    throw NotImplementedError()
  }

  data class {{#upperFirstLetter}}{{operationId}}{{/upperFirstLetter}}Result private constructor(
    val status: HttpStatusType,
    val headers: Map<String, String>,
    val body: Any? = null,
    val contentType: String? = null
  ) {
    companion object {
    {{#responses}}
      {{#content}}
        {{#debug}}response with content{{/debug}}
      {{# ContentTypeMap }}

      {{#trim1L}}
          fun respond{{^isDefault}}{{code}}{{/isDefault}}
        {{^isUnique}}{{contentTypeShortName}}{{/isUnique}}
      (
        {{#needsExplicitHttpCode}}status: HttpStatusType, {{/needsExplicitHttpCode}}
        {{#dataType}}result: {{dataType}}, {{/dataType}}headers: Map<String, String> = mapOf()
      ): {{#upperFirstLetter}}{{operationId}}{{/upperFirstLetter}}Result =
      {{/trim1L}}
      {{#trim1L}}
        {{#upperFirstLetter}}{{operationId}}{{/upperFirstLetter}}Result
        (
        {{#needsExplicitHttpCode}}status{{/needsExplicitHttpCode}}
        {{^needsExplicitHttpCode}}status = HttpStatusType.custom({{code}}){{/needsExplicitHttpCode}}
        ,headers = headers{{#dataType}}, body = result{{/dataType}}{{#hasContentType}}, contentType = "{{key}}"{{/hasContentType}}
        );
      {{/trim1L}}
      {{/ContentTypeMap}}
      {{/content}}
      {{^content}}
        {{#debug}}response without content{{/debug}}
      fun respond{{^isDefault}}{{code}}{{/isDefault}}({{#isDefault}}status: HttpStatusType, {{/isDefault}}headers: Map<String, String> = mapOf()): {{#upperFirstLetter}}{{operationId}}{{/upperFirstLetter}}Result {
        return {{#upperFirstLetter}}{{operationId}}{{/upperFirstLetter}}Result({{#isDefault}}status{{/isDefault}}{{^isDefault}}status = HttpStatusType.custom({{code}}){{/isDefault}}, headers = headers);
      }
      {{/content}}
   {{/responses}}
    }
  }
{{/operation}}


}
{{/operations}}
