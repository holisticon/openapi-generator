package {{package}}

{{#debug}}api.mustache{{/debug}}

{{#debug}}== iterated imports =={{/debug}}
{{#imports}}
import {{import}}
{{/imports}}

{{#debug}}== manual imports =={{/debug}}
import kotlin.collections.List
import kotlin.collections.Map


import com.microsoft.azure.*
import com.microsoft.azure.functions.*
import com.microsoft.azure.functions.annotation.*

import javax.naming.Binding

{{#debug}}  Companion enumeration imports =={{/debug}}
{{#operations}}{{#operation}}{{#allParams}}{{#isEnum}}{{#trim1L}}
  {{^isFormParam}}
import {{package}}.{{classname}}Interface.Companion.{{enumName}} // for {{baseName}}: import {{package}}.{{classname}}Interface.Companion.{{datatypeWithEnum}} // remove me later
  {{/isFormParam}}
  {{#isFormParam}}
    {{#debug}}filtered {{enumName}}/{{baseName}} as it's a form parameter{{/debug}}
  {{/isFormParam}}{{/trim1L}}
{{/isEnum}}{{/allParams}}{{/operation}}{{/operations}}

{{#operations}}
class {{classname}} {

  val api: {{classname}}Interface = {{#removeApiSuffix}}{{classname}}{{/removeApiSuffix}}Api()

{{#operation}}
  @FunctionName("{{operationId}}")
  {{#isDeprecated}}
  @Deprecated(message = "This function is deprecated.")
  {{/isDeprecated}}
  fun {{operationId}}Function(
    {{#removeEmptyLines}}{{#lambda.indented}}{{>methodParams}}{{/lambda.indented}}{{/removeEmptyLines}}
  ): HttpResponseMessage {
    {{#lambda.indented}}{{#removeEmptyLines}}{{>apiMethodBodyParameters}}{{/removeEmptyLines}}{{/lambda.indented}}
    val response = api.{{operationId}}(request = request {{#vendorExtensions.x-azure-additional-properties}}, {{parameterName}} = {{parameterName}}{{/vendorExtensions.x-azure-additional-properties}}{{#allParams}}{{^isFormParam}}, {{paramName}} = {{paramName}}{{^defaultValue}}{{#required}}!!{{/required}}{{/defaultValue}}{{/isFormParam}}{{/allParams}})

    val builder = request.createResponseBuilder(response.status).body(response.body)
    if(response.contentType != null){
      builder.header("Content-Type",response.contentType)
    }
    response.headers.forEach { builder.header(it.key, it.value) }
    return builder.build()
  }
{{/operation}}
}
{{/operations}}
